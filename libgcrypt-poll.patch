--- libgcrypt-1.7.1/random/rndlinux.c.orig	2016-06-08 18:18:17.000000000 +0200
+++ libgcrypt-1.7.1/random/rndlinux.c	2016-06-22 22:26:14.692219129 +0200
@@ -32,6 +32,7 @@
 #include <string.h>
 #include <unistd.h>
 #include <fcntl.h>
+#include <poll.h>
 #if defined(__linux__) && defined(HAVE_SYSCALL)
 # include <sys/syscall.h>
 #endif
@@ -191,8 +192,7 @@
                  return with something we will actually use 100ms. */
   while (length)
     {
-      fd_set rfds;
-      struct timeval tv;
+      struct pollfd fds;
       int rc;
 
       /* If we collected some bytes update the progress indicator.  We
@@ -207,20 +207,10 @@
           any_need_entropy = 1;
         }
 
-      /* If the system has no limit on the number of file descriptors
-         and we encounter an fd which is larger than the fd_set size,
-         we don't use the select at all.  The select code is only used
-         to emit progress messages.  A better solution would be to
-         fall back to poll() if available.  */
-#ifdef FD_SETSIZE
-      if (fd < FD_SETSIZE)
-#endif
         {
-          FD_ZERO(&rfds);
-          FD_SET(fd, &rfds);
-          tv.tv_sec = delay;
-          tv.tv_usec = delay? 0 : 100000;
-          if ( !(rc=select(fd+1, &rfds, NULL, NULL, &tv)) )
+          fds.fd = fd;
+          fds.events = POLLIN;
+          if ( !(rc=poll(&fds, 1, delay ? (delay*1000) : 100)) )
             {
               any_need_entropy = 1;
               delay = 3; /* Use 3 seconds henceforth.  */
@@ -228,7 +218,7 @@
             }
           else if( rc == -1 )
             {
-              log_error ("select() error: %s\n", strerror(errno));
+              log_error ("poll() error: %s\n", strerror(errno));
               if (!delay)
                 delay = 1; /* Use 1 second if we encounter an error before
                               we have ever blocked.  */
